// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: textprocessor.proto

package textprocessor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TextProcessorClient is the client API for TextProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextProcessorClient interface {
	GetDictionaryWords(ctx context.Context, in *DictionaryRequest, opts ...grpc.CallOption) (*DictionaryResponse, error)
	GetNonSafeWords(ctx context.Context, in *NonSafeRequest, opts ...grpc.CallOption) (*NonSafeResponse, error)
	GetInformalWords(ctx context.Context, in *InformalRequest, opts ...grpc.CallOption) (*InformalResponse, error)
	GetUpperCaseWords(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseResponse, error)
}

type textProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewTextProcessorClient(cc grpc.ClientConnInterface) TextProcessorClient {
	return &textProcessorClient{cc}
}

func (c *textProcessorClient) GetDictionaryWords(ctx context.Context, in *DictionaryRequest, opts ...grpc.CallOption) (*DictionaryResponse, error) {
	out := new(DictionaryResponse)
	err := c.cc.Invoke(ctx, "/textprocessor.TextProcessor/GetDictionaryWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textProcessorClient) GetNonSafeWords(ctx context.Context, in *NonSafeRequest, opts ...grpc.CallOption) (*NonSafeResponse, error) {
	out := new(NonSafeResponse)
	err := c.cc.Invoke(ctx, "/textprocessor.TextProcessor/GetNonSafeWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textProcessorClient) GetInformalWords(ctx context.Context, in *InformalRequest, opts ...grpc.CallOption) (*InformalResponse, error) {
	out := new(InformalResponse)
	err := c.cc.Invoke(ctx, "/textprocessor.TextProcessor/GetInformalWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textProcessorClient) GetUpperCaseWords(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseResponse, error) {
	out := new(UppercaseResponse)
	err := c.cc.Invoke(ctx, "/textprocessor.TextProcessor/GetUpperCaseWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextProcessorServer is the server API for TextProcessor service.
// All implementations must embed UnimplementedTextProcessorServer
// for forward compatibility
type TextProcessorServer interface {
	GetDictionaryWords(context.Context, *DictionaryRequest) (*DictionaryResponse, error)
	GetNonSafeWords(context.Context, *NonSafeRequest) (*NonSafeResponse, error)
	GetInformalWords(context.Context, *InformalRequest) (*InformalResponse, error)
	GetUpperCaseWords(context.Context, *UppercaseRequest) (*UppercaseResponse, error)
	mustEmbedUnimplementedTextProcessorServer()
}

// UnimplementedTextProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedTextProcessorServer struct {
}

func (UnimplementedTextProcessorServer) GetDictionaryWords(context.Context, *DictionaryRequest) (*DictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryWords not implemented")
}
func (UnimplementedTextProcessorServer) GetNonSafeWords(context.Context, *NonSafeRequest) (*NonSafeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNonSafeWords not implemented")
}
func (UnimplementedTextProcessorServer) GetInformalWords(context.Context, *InformalRequest) (*InformalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInformalWords not implemented")
}
func (UnimplementedTextProcessorServer) GetUpperCaseWords(context.Context, *UppercaseRequest) (*UppercaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpperCaseWords not implemented")
}
func (UnimplementedTextProcessorServer) mustEmbedUnimplementedTextProcessorServer() {}

// UnsafeTextProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextProcessorServer will
// result in compilation errors.
type UnsafeTextProcessorServer interface {
	mustEmbedUnimplementedTextProcessorServer()
}

func RegisterTextProcessorServer(s grpc.ServiceRegistrar, srv TextProcessorServer) {
	s.RegisterService(&TextProcessor_ServiceDesc, srv)
}

func _TextProcessor_GetDictionaryWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextProcessorServer).GetDictionaryWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/textprocessor.TextProcessor/GetDictionaryWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextProcessorServer).GetDictionaryWords(ctx, req.(*DictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextProcessor_GetNonSafeWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonSafeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextProcessorServer).GetNonSafeWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/textprocessor.TextProcessor/GetNonSafeWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextProcessorServer).GetNonSafeWords(ctx, req.(*NonSafeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextProcessor_GetInformalWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InformalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextProcessorServer).GetInformalWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/textprocessor.TextProcessor/GetInformalWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextProcessorServer).GetInformalWords(ctx, req.(*InformalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextProcessor_GetUpperCaseWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UppercaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextProcessorServer).GetUpperCaseWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/textprocessor.TextProcessor/GetUpperCaseWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextProcessorServer).GetUpperCaseWords(ctx, req.(*UppercaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextProcessor_ServiceDesc is the grpc.ServiceDesc for TextProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "textprocessor.TextProcessor",
	HandlerType: (*TextProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDictionaryWords",
			Handler:    _TextProcessor_GetDictionaryWords_Handler,
		},
		{
			MethodName: "GetNonSafeWords",
			Handler:    _TextProcessor_GetNonSafeWords_Handler,
		},
		{
			MethodName: "GetInformalWords",
			Handler:    _TextProcessor_GetInformalWords_Handler,
		},
		{
			MethodName: "GetUpperCaseWords",
			Handler:    _TextProcessor_GetUpperCaseWords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "textprocessor.proto",
}
