// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: contentintegrity.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentIntegrityClient is the client API for ContentIntegrity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentIntegrityClient interface {
	GetArticleData(ctx context.Context, in *ArticleDataRequest, opts ...grpc.CallOption) (*ArticleDataResponse, error)
}

type contentIntegrityClient struct {
	cc grpc.ClientConnInterface
}

func NewContentIntegrityClient(cc grpc.ClientConnInterface) ContentIntegrityClient {
	return &contentIntegrityClient{cc}
}

func (c *contentIntegrityClient) GetArticleData(ctx context.Context, in *ArticleDataRequest, opts ...grpc.CallOption) (*ArticleDataResponse, error) {
	out := new(ArticleDataResponse)
	err := c.cc.Invoke(ctx, "/contentintegrity.ContentIntegrity/GetArticleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentIntegrityServer is the server API for ContentIntegrity service.
// All implementations must embed UnimplementedContentIntegrityServer
// for forward compatibility
type ContentIntegrityServer interface {
	GetArticleData(context.Context, *ArticleDataRequest) (*ArticleDataResponse, error)
	mustEmbedUnimplementedContentIntegrityServer()
}

// UnimplementedContentIntegrityServer must be embedded to have forward compatible implementations.
type UnimplementedContentIntegrityServer struct {
}

func (UnimplementedContentIntegrityServer) GetArticleData(context.Context, *ArticleDataRequest) (*ArticleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleData not implemented")
}
func (UnimplementedContentIntegrityServer) mustEmbedUnimplementedContentIntegrityServer() {}

// UnsafeContentIntegrityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentIntegrityServer will
// result in compilation errors.
type UnsafeContentIntegrityServer interface {
	mustEmbedUnimplementedContentIntegrityServer()
}

func RegisterContentIntegrityServer(s grpc.ServiceRegistrar, srv ContentIntegrityServer) {
	s.RegisterService(&ContentIntegrity_ServiceDesc, srv)
}

func _ContentIntegrity_GetArticleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentIntegrityServer).GetArticleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentintegrity.ContentIntegrity/GetArticleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentIntegrityServer).GetArticleData(ctx, req.(*ArticleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentIntegrity_ServiceDesc is the grpc.ServiceDesc for ContentIntegrity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentIntegrity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contentintegrity.ContentIntegrity",
	HandlerType: (*ContentIntegrityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticleData",
			Handler:    _ContentIntegrity_GetArticleData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contentintegrity.proto",
}
