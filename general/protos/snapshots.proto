syntax = "proto3";

package snapshots;

option go_package = "./;protos";

// Snapshots service method definitions
service Snapshots {
  rpc Export(ExportRequest) returns (ExportResponse);
  rpc Copy(CopyRequest) returns (CopyResponse);
  rpc Aggregate(AggregateRequest) returns (AggregateResponse);
  rpc AggregateCopy(AggregateCopyRequest) returns (AggregateCopyResponse);
  rpc AggregateCommons(AggregateCommonsRequest) returns (AggregateCommonsResponse);
}

// Export io
message ExportRequest {
  int32 namespace = 1;
  int32 workers = 2;
  string project = 3;
  string prefix = 4;
  string language = 5;
  int64 since = 6;
  repeated string exclude_events = 7;
  string type = 8;
  bool enable_chunking = 9;

  // If set to true, and prefix="batches", the path of the object will also contain the hour of the time provided in "since".
  // e.g. instead of uploading to batches/2025-06-26/enwiki_namespace_0.json (and .tar.gz), it will upload to
  // batches/2025-06-26/15/enwiki_namespace_0.json (and .tar.gz).
  bool enable_non_cumulative_batches = 10;
}

message ExportResponse {
  int32 total = 1;
  int32 errors = 2;
}

// Copy io description
message CopyRequest {
  int32 workers = 1;
  repeated string projects = 2;
  int32 namespace = 3;
}

message CopyResponse {
  int32 total = 1;
  int32 errors = 2;
}

// Aggregate io description
message AggregateRequest {
  string prefix = 1;
  int64 since = 2;
  string snapshot = 3;
}

message AggregateResponse {
  int32 total = 1;
  int32 errors = 2;
}

// Aggregate copy io description
message AggregateCopyRequest {
  repeated string projects = 1;
  repeated int32 namespaces = 2;
}

message AggregateCopyResponse {
  int32 total = 1;
  int32 errors = 2;
}


// Aggregate commons io description
message AggregateCommonsRequest {
  string prefix = 1;
  string time_period = 2;
}

message AggregateCommonsResponse {
  int32 total = 1;
  int32 errors = 2;
}
