openapi: 3.0.3
info:
  title: Wikimedia Enterprise API spec
  description: |
    OpenAPI 3.0 specification for the Metadata, On-demand, Snapshot, and Realtime Batch API(s) of WME.

    While we provide this swagger spec for quick reference, our official documentation is located on our website:

    - [Official Documentation](https://enterprise.wikimedia.com/docs/)
    - [Data Dictionary & Schema](https://enterprise.wikimedia.com/docs/data-dictionary/)
  version: 2.0.0
servers:
  - url: https://api.enterprise.wikimedia.com
tags:
  - name: codes
    description: Metadata
    externalDocs:
      description: enterprise docs — metadata
      url: https://enterprise.wikimedia.com/docs/metadata/
  - name: languages
    description: Metadata
    externalDocs:
      description: enterprise docs — metadata
      url: https://enterprise.wikimedia.com/docs/metadata/
  - name: projects
    description: Metadata
    externalDocs:
      description: enterprise docs — metadata
      url: https://enterprise.wikimedia.com/docs/metadata/
  - name: namespaces
    description: Metadata
    externalDocs:
      description: enterprise docs — metadata
      url: https://enterprise.wikimedia.com/docs/metadata/
  - name: snapshots
    description: Snapshot API
    externalDocs:
      description: enterprise docs — snapshot api
      url: https://enterprise.wikimedia.com/docs/snapshot/
  - name: articles
    description: On-demand API
    externalDocs:
      description: enterprise docs — on-demand api
      url: https://enterprise.wikimedia.com/docs/on-demand/
  - name: structured-contents
    description: (BETA) On-demand API
    externalDocs:
      description: enterprise docs — on-demand api
      url: https://enterprise.wikimedia.com/docs/on-demand/
  - name: batches
    description: Realtime Batch API
    externalDocs:
      description: enterprise docs — realtime api
      url: https://enterprise.wikimedia.com/docs/realtime/
security:
  - bearerAuth: []
paths:
  #-------------------------
  # Codes
  #-------------------------
  /v2/codes:
    summary: &codes_summary Available Project Codes (Project Types)
    description: &codes_description >
      Lists available project codes (types). Includes project code (type) identifier, name and description.
    get:
      summary: *codes_summary
      description: *codes_description
      tags:
        - codes
      parameters:
        - &fields_query
          in: query
          name: fields
          description: &fields_description Allows to select what fields you receive in your response.
          schema:
            type: array
            items:
              type: string
              example: name
        - &filters_query
          in: query
          name: filters
          description: &filters_description Allows you to filter the response payload.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/filter"
      responses: &codes_responses
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/code"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"identifier":"string","name":"string","description":"string"}

                  {"identifier":"string","name":"string","description":"string"}
        401: &unauthorized_error
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"message":"string","status": 401}
        404: &not_found_error
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"message":"string","status": 404}
        403: &forbidden_error
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"message":"string","status": 403}
        422: &unprocessable_entity_error
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"message":"string","status":422}
        500: &internal_server_error
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"message":"string","status":500}
    post:
      summary: *codes_summary
      description: *codes_description
      tags:
        - codes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields: &fields_body
                  type: array
                  example: >
                    ["name","identifier"]
                  description: *fields_description
                  items:
                    type: string
                filters:
                  type: &filters_body_type array
                  description: *filters_description
                  items: &filters_body_items
                    $ref: "#/components/schemas/filter"
                  example: >
                    [{"field":"identifier","value":"wiki"}]
      responses: *codes_responses
  /v2/codes/{identifier}:
    summary: &code_summary Single Project Code (Project Type)
    description: &code_description Information on a specific project code (type). Includes identifier, name and description.
    get:
      summary: *code_summary
      description: *code_description
      tags:
        - codes
      parameters:
        - &code_identifier_param
          in: path
          name: identifier
          description: Identifier of the code.
          required: true
          schema:
            type: string
            minLength: 1
        - *fields_query
      responses: &code_response
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/code"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"identifier":"string","name": "string","description": "string"}
        401: *unauthorized_error
        403: *forbidden_error
        404: *not_found_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    post:
      summary: *code_summary
      description: *code_description
      tags:
        - codes
      parameters:
        - *code_identifier_param
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields: *fields_body
      responses: *code_response
  #-------------------------
  # Languages
  #-------------------------
  /v2/languages:
    summary: &languages_summary Available Languages
    description: &languages_description >
      Lists of available languages. Includes language identifier, name, direction and other relevant metadata.
    get:
      summary: *languages_summary
      description: *languages_description
      tags:
        - languages
      parameters:
        - *fields_query
        - *filters_query
      responses: &languages_responses
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/language"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"identifier": "string","name": "string","alternate_name": "string","direction": "string"}

                  {"identifier": "string","name": "string","alternate_name": "string","direction": "string"}
        401: *unauthorized_error
        403: *forbidden_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    post:
      summary: *languages_summary
      description: *languages_description
      tags:
        - languages
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields: *fields_body
                filters:
                  type: *filters_body_type
                  description: *filters_description
                  items: *filters_body_items
                  example: >
                    [{"field":"identifier","value":"en"}]
      responses: *languages_responses
  /v2/languages/{identifier}:
    summary: &language_summary Single Language
    description: &language_description Information on specific language. Includes identifier, name, direction and other relevant metadata.
    get:
      summary: *language_summary
      description: *language_description
      tags:
        - languages
      parameters:
        - &language_identifier
          in: path
          name: identifier
          required: true
          description: Identifier of the language.
          schema:
            type: string
            minLength: 1
        - *fields_query
      responses: &language_responses
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/language"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"identifier": "string","name": "string","alternate_name": "string","direction": "string"}
        401: *unauthorized_error
        403: *forbidden_error
        404: *not_found_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    post:
      summary: *language_summary
      description: *language_description
      tags:
        - languages
      parameters:
        - *language_identifier
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields: *fields_body
      responses: *language_responses
  #-------------------------
  # Projects
  #-------------------------
  /v2/projects:
    summary: &projects_summary Available Projects
    description: &projects_description List of available projects. Includes project identifier, name, language and other relevant metadata.
    get:
      summary: *projects_summary
      description: *projects_description
      tags:
        - projects
      parameters:
        - *fields_query
        - *filters_query
      responses: &projects_responses
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/project"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"identifier":"string","code":"string","name":"string","alternate_name":"string","in_language":{"identifier":"string"}}

                  {"identifier":"string","code":"string","name":"string","alternate_name":"string","in_language":{"identifier":"string"}}
        401: *unauthorized_error
        403: *forbidden_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    post:
      summary: *projects_summary
      description: *projects_description
      tags:
        - projects
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields: *fields_body
                filters:
                  type: *filters_body_type
                  description: *filters_description
                  items: *filters_body_items
                  example: >
                    [{"field":"identifier","value":"enwiki"}]
      responses: *projects_responses
  /v2/projects/{identifier}:
    summary: &project_summary Single Project
    description: &project_description Information on specific project. Includes identifier, name, language and other relevant metadata.
    get:
      summary: *project_summary
      description: *project_description
      tags:
        - projects
      parameters:
        - &project_identifier_param
          in: path
          name: identifier
          description: Project identifier.
          required: true
          schema:
            type: string
            minLength: 1
        - *fields_query
      responses: &project_responses
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"identifier":"string","code":"string","name":"string","alternate_name":"string","in_language":{"identifier":"string"}}
        401: *unauthorized_error
        403: *forbidden_error
        404: *not_found_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    post:
      summary: *project_summary
      description: *project_description
      tags:
        - projects
      parameters:
        - *project_identifier_param
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields: *fields_body
      responses: *project_responses
  #-------------------------
  # Namespaces
  #-------------------------
  /v2/namespaces:
    summary: &namespaces_summary Available Namespaces
    description: &namespaces_description List of available namespaces. Includes name, identifier and description.
    get:
      summary: *namespaces_summary
      description: *namespaces_description
      tags:
        - namespaces
      parameters:
        - *fields_query
        - *filters_query
      responses: &namespaces_responses
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/namespace"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"identifier": 0,"name": "string","description": "string"}

                  {"identifier": 0,"name": "string","description": "string"}
        401: *unauthorized_error
        403: *forbidden_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    post:
      summary: *namespaces_summary
      description: *namespaces_description
      tags:
        - namespaces
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields: *fields_body
                filters:
                  type: *filters_body_type
                  description: *filters_description
                  items: *filters_body_items
                  example: >
                    [{"field":"identifier","value":0}]
      responses: *namespaces_responses
  /v2/namespaces/{identifier}:
    summary: &namespace_summary Single Namespace
    description: &namespace_description Information on specific namespace. Includes name, identifier and description.
    get:
      summary: *namespace_summary
      description: *namespace_description
      tags:
        - namespaces
      parameters:
        - &namespace_identifier_param
          in: path
          name: identifier
          description: Namespace identifier.
          required: true
          schema:
            type: integer
        - *fields_query
      responses: &namespace_responses
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/namespace"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"identifier":0,"name":"string","description":"string"}
        401: *unauthorized_error
        403: *forbidden_error
        404: *not_found_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    post:
      summary: *namespace_summary
      description: *namespace_description
      tags:
        - namespaces
      parameters:
        - *namespace_identifier_param
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields: *fields_body
      responses: *namespace_responses
  #-------------------------
  # Batches
  #-------------------------
  /v2/batches/{date}:
    summary: &batches_summary Available Hourly Batches
    description: &batches_description Returns a list of available Realtime (Batch) bundles by date. Includes identifiers, file sizes and other relevant metadata.
    get:
      summary: *batches_summary
      description: *batches_description
      tags:
        - batches
      parameters:
        - &batches_date_param
          in: path
          name: date
          required: true
          schema:
            type: string
            minLength: 1
            default: "2023-02-28"
        - *fields_query
        - *filters_query
      responses: &batches_responses
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/batch"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"identifier": "string","code": "string","name": "string","version": "string","is_part_of":{"identifier":"string"},"namespace":{"identifier":0},"in_language":{"identifier":"string"}}

                  {"identifier": "string","code": "string","name": "string","version": "string","is_part_of":{"identifier":"string"},"namespace":{"identifier":0},"in_language":{"identifier":"string"}}
        401: *unauthorized_error
        403: *forbidden_error
        404: *not_found_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    post:
      summary: *batches_summary
      description: *batches_description
      tags:
        - batches
      parameters:
        - *batches_date_param
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields: *fields_body
                filters:
                  type: *filters_body_type
                  description: *filters_description
                  items: *filters_body_items
                  example: >
                    [{"field":"namespace.identifier","value":0}]
      responses: *batches_responses
  /v2/batches/{date}/{identifier}:
    summary: &batch_summary Single Hourly Metadata
    description: &batch_description Information on specific hourly batch. Includes identifier, file size and other relevant metadata.
    get:
      summary: *batch_summary
      description: *batch_description
      tags:
        - batches
      parameters:
        - *batches_date_param
        - &batch_identifier_param
          in: path
          name: identifier
          required: true
          description: Batch identifier.
          schema:
            type: string
            minLength: 1
        - *fields_query
      responses: &batch_responses
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batch"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"identifier": "string","code": "string","name": "string","version": "string","is_part_of":{"identifier":"string"},"namespace":{"identifier":0},"in_language":{"identifier":"string"}}
        401: *unauthorized_error
        403: *forbidden_error
        404: *not_found_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    post:
      summary: *batch_summary
      description: *batch_description
      tags:
        - batches
      parameters:
        - *batches_date_param
        - *batch_identifier_param
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields: *fields_body
      responses: *batch_responses
  /v2/batches/{date}/{identifier}/download:
    summary: Project Updates (Batch)
    description: Downloadable bundle of updated articles by project, namespace, and date. Updated hourly starting at 00:00 UTC each day.
    head:
      summary: Project Updates (Batch) Headers
      description: Set of headers that describe the hourly download.
      tags:
        - batches
      parameters:
        - *batches_date_param
        - *batch_identifier_param
      responses: &head_responses
        200:
          description: OK
          headers:
            Accept-Ranges:
              schema:
                type: string
              description: HTTP response header is a marker used by the server to advertise its support for partial requests.
            Last-Modified:
              schema:
                type: string
              description: Response HTTP header contains a date and time when the origin server believes the resource was last modified.
            Content-Length:
              schema:
                type: string
              description: Header indicates the size of the message body, in bytes, sent to the recipient.
            ETag:
              schema:
                type: string
              description: Entity tag - HTTP response header is an identifier for a specific version of a resource.
            Content-Disposition:
              schema:
                type: string
              description: Header indicating if the content is expected to be displayed in the browser  or as an attachment, that is downloaded and saved locally.
            Content-Encoding:
              schema:
                type: string
              description: Lists any encodings that have been applied to the representation (message payload), and in what order.
            Content-Type:
              schema:
                type: string
              description: Indicates the original media type of the resource (prior to any content encoding applied for sending).
            Expires:
              schema:
                type: string
              description: Contains the date/time after which the response is considered expired.
        401: *unauthorized_error
        403: *forbidden_error
        404: *not_found_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    get:
      summary: Project Updates (Batch)
      description: Downloadable bundle of updated articles by project, namespace, and date. Updated hourly starting at 00:00 UTC each day.
      tags:
        - batches
      parameters:
        - *batches_date_param
        - *batch_identifier_param
        - &range_header_param
          in: header
          name: Range
          description: The Range HTTP request header indicates the part of a document that the server should return.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/gzip:
              schema:
                type: string
                format: binary
        401: *unauthorized_error
        403: *forbidden_error
        404: *not_found_error
        422: *unprocessable_entity_error
        500: *internal_server_error
  #-------------------------
  # Snapshots
  #-------------------------
  /v2/snapshots:
    summary: &snapshots_summary Available Snapshots
    description: &snapshots_description Returns a list of available project snapshots by namespace. Includes identifiers, file sizes and other relevant metadata.
    get:
      summary: *snapshots_summary
      description: *snapshots_description
      tags:
        - snapshots
      parameters:
        - *fields_query
        - *filters_query
      responses: &snapshots_responses
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/snapshot"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"identifier": "string","code": "string","name": "string","version": "string","is_part_of":{"identifier":"string"},"namespace":{"identifier":0},"in_language":{"identifier":"string"}}

                  {"identifier": "string","code": "string","name": "string","version": "string","is_part_of":{"identifier":"string"},"namespace":{"identifier":0},"in_language":{"identifier":"string"}}
        401: *unauthorized_error
        403: *forbidden_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    post:
      summary: *snapshots_summary
      description: *snapshots_description
      tags:
        - snapshots
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields: *fields_body
                filters:
                  type: *filters_body_type
                  description: *filters_description
                  items: *filters_body_items
                  example: >
                    [{"field":"namespace.identifier","value":0}]
      responses: *snapshots_responses
  /v2/snapshots/{identifier}:
    summary: &snapshot_summary Snapshot Bundle Info
    description: &snapshot_description Information on a specific Snapshot bundle. Includes identifiers, file sizes and other relevant metadata.
    get:
      summary: *snapshot_summary
      description: *snapshot_description
      tags:
        - snapshots
      parameters:
        - &snapshots_identifier_param
          in: path
          name: identifier
          description: Snapshot identifier.
          required: true
          schema:
            type: string
            minLength: 1
        - *fields_query
      responses: &snapshot_responses
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/snapshot"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"identifier": "string","code": "string","name": "string","version": "string","is_part_of":{"identifier":"string"},"namespace":{"identifier":0},"in_language":{"identifier":"string"}}
        401: *unauthorized_error
        403: *forbidden_error
        404: *not_found_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    post:
      summary: *snapshot_summary
      description: *snapshot_description
      tags:
        - snapshots
      parameters:
        - *snapshots_identifier_param
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields: *fields_body
      responses: *snapshot_responses
  /v2/snapshots/{identifier}/download:
    summary: &snapshot_download_summary Project Snapshot
    description: &snapshots_download_description Downloadable bundle of all current revisions in a specified project and namespace. Updated daily at 12:00 UTC.
    head:
      summary: Project Snapshot Headers
      description: Set of headers that describe the hourly download.
      tags:
        - snapshots
      parameters:
        - *snapshots_identifier_param
      responses:
        200:
          description: OK
          headers:
            Accept-Ranges:
              schema:
                type: string
              description: HTTP response header is a marker used by the server to advertise its support for partial requests.
            Last-Modified:
              schema:
                type: string
              description: Response HTTP header contains a date and time when the origin server believes the resource was last modified.
            Content-Length:
              schema:
                type: string
              description: Header indicates the size of the message body, in bytes, sent to the recipient.
            ETag:
              schema:
                type: string
              description: Entity tag - HTTP response header is an identifier for a specific version of a resource.
            Content-Disposition:
              schema:
                type: string
              description: Header indicating if the content is expected to be displayed in the browser  or as an attachment, that is downloaded and saved locally.
            Content-Encoding:
              schema:
                type: string
              description: Lists any encodings that have been applied to the representation (message payload), and in what order.
            Content-Type:
              schema:
                type: string
              description: Indicates the original media type of the resource (prior to any content encoding applied for sending).
            Expires:
              schema:
                type: string
              description: Contains the date/time after which the response is considered expired.
        401: *unauthorized_error
        403: *forbidden_error
        404: *not_found_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    get:
      summary: *snapshot_download_summary
      description: *snapshots_download_description
      tags:
        - snapshots
      parameters:
        - *snapshots_identifier_param
        - *range_header_param
      responses:
        200:
          description: OK
          content:
            application/gzip:
              schema:
                type: string
                format: binary
        401: *unauthorized_error
        403: *forbidden_error
        404: *not_found_error
        422: *unprocessable_entity_error
        500: *internal_server_error
  #-------------------------
  # Articles
  #-------------------------
  /v2/articles/{name}:
    summary: &articles_summary Article Lookup
    description: &articles_description Most current revision of an article.
    get:
      summary: *articles_summary
      description: *articles_description
      tags:
        - articles
      parameters:
        - &article_name_param
          in: path
          name: name
          description: Article name.
          required: true
          schema:
            type: string
            minLength: 1
        - in: query
          name: limit
          description: &article_limit_description Limit of articles to return.
          schema:
            type: integer
            default: 3
        - *fields_query
        - *filters_query
      responses: &article_responses
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/article"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  [{"identifier":0,"name":"string","in_language":{"identifier":"string","name":"string","alternate_name":"string","direction":"string"},"is_part_of":{"identifier":"string","code":"string","name":"string","url":"string","in_language":{"identifier":"string","name":"string","alternate_name":"string","direction":"string"}},"namespace":{"identifier":0,"name":"string","description":"string"},"main_entity":{"identifier":"string","url":"string"}}]

                  [{"identifier":0,"name":"string","in_language":{"identifier":"string","name":"string","alternate_name":"string","direction":"string"},"is_part_of":{"identifier":"string","code":"string","name":"string","url":"string","in_language":{"identifier":"string","name":"string","alternate_name":"string","direction":"string"}},"namespace":{"identifier":0,"name":"string","description":"string"},"main_entity":{"identifier":"string","url":"string"}}]
        401: *unauthorized_error
        403: *forbidden_error
        404: *not_found_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    post:
      summary: *articles_summary
      description: *articles_description
      tags:
        - articles
      parameters:
        - *article_name_param
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields: *fields_body
                filters:
                  type: *filters_body_type
                  description: *filters_description
                  items: *filters_body_items
                  example: >
                    [{"field":"in_language.identifier","value":"en"}]
                limit:
                  type: integer
                  description: *article_limit_description
                  default: 3
      responses: *article_responses
  #-------------------------
  # Structured Contents
  #-------------------------
  /v2/structured-contents/{name}:
    summary: &contents_summary Article Structured Contents (BETA)
    description: &contents_description Lookup for the structured representation of the Article.
    get:
      summary: *contents_summary
      description: *contents_description
      tags:
        - structured-contents
      parameters:
        - &contents_name_param
          in: path
          name: name
          description: Article name.
          required: true
          schema:
            type: string
            minLength: 1
        - in: query
          name: limit
          description: *article_limit_description
          schema:
            type: integer
            default: 3
        - *fields_query
        - *filters_query
      responses: &contents_responses
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/structured-content"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  [{"identifier":0,"name":"string","in_language":{"identifier":"string"},"is_part_of":{"identifier":"string"},"infobox":[],"main_entity":{"identifier":"string","url":"string"},{"name":"Abstract","type":"section","has_parts":[{"type":"paragraph","value":"string","links":[{"url":"string","text":"string"},{"url":"string","text":"string"}]},{"name":"string","type":"section","has_parts":[{"type":"list","has_parts":[{"type":"list_item","value":"string"},{"type":"list_item","value":"string","links":[{"url":"string","text":"string"}]}]}]}]}}]

                  [{"identifier":0,"name":"string","in_language":{"identifier":"string"},"is_part_of":{"identifier":"string"},"infobox":[],"main_entity":{"identifier":"string","url":"string"},{"name":"Abstract","type":"section","has_parts":[{"type":"paragraph","value":"string","links":[{"url":"string","text":"string"},{"url":"string","text":"string"}]},{"name":"string","type":"section","has_parts":[{"type":"list","has_parts":[{"type":"list_item","value":"string"},{"type":"list_item","value":"string","links":[{"url":"string","text":"string"}]}]}]}]}}]
        401: *unauthorized_error
        403: *forbidden_error
        404: *not_found_error
        422: *unprocessable_entity_error
        500: *internal_server_error
    post:
      summary: *contents_summary
      description: *contents_description
      tags:
        - structured-contents
      parameters:
        - *contents_name_param
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields: *fields_body
                filters:
                  type: *filters_body_type
                  description: *filters_description
                  items: *filters_body_items
                  example: >
                    [{"field":"in_language.identifier","value":"en"}]
                limit:
                  type: integer
                  description: *article_limit_description
                  default: 3
      responses: *contents_responses
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    error:
      type: object
      properties:
        message:
          type: string
        status:
          type: integer

    language:
      type: object
      properties:
        identifier:
          type: string
        name:
          type: string
        alternate_name:
          type: string
        direction:
          type: string

    code:
      type: object
      properties:
        identifier:
          type: string
        name:
          type: string
        description:
          type: string

    project:
      type: object
      properties:
        identifier:
          type: string
        code:
          type: string
        name:
          type: string
        url:
          type: string
        in_language:
          $ref: "#/components/schemas/language"

    batch:
      type: object
      properties:
        identifier:
          type: string
        name:
          type: string
        version:
          type: string
        in_language:
          $ref: "#/components/schemas/language"
        is_part_of:
          $ref: "#/components/schemas/project"
        namespace:
          $ref: "#/components/schemas/namespace"
        size:
          $ref: "#/components/schemas/size"

    snapshot:
      type: object
      properties:
        identifier:
          type: string
        name:
          type: string
        version:
          type: string
        in_language:
          $ref: "#/components/schemas/language"
        is_part_of:
          $ref: "#/components/schemas/project"
        namespace:
          $ref: "#/components/schemas/namespace"
        size:
          $ref: "#/components/schemas/size"

    namespace:
      type: object
      properties:
        identifier:
          type: number
        name:
          type: string
        description:
          type: string

    entity:
      type: object
      properties:
        identifier:
          type: string
        url:
          type: string

    article:
      properties:
        event:
          $ref: "#/components/schemas/event"
        additional_entities:
          items:
            $ref: "#/components/schemas/entity"
          type: array
        article_body:
          $ref: "#/components/schemas/article_body"
        has_parts:
          type: array
          items:
            $ref: "#/components/schemas/part"
        categories:
          items:
            $ref: "#/components/schemas/category"
          type: array
        date_modified:
          type: string
        identifier:
          type: integer
        in_language:
          $ref: "#/components/schemas/language"
        is_part_of:
          $ref: "#/components/schemas/project"
        license:
          items:
            $ref: "#/components/schemas/license"
          type: array
        main_entity:
          $ref: "#/components/schemas/entity"
        name:
          type: string
        abstract:
          type: string
        namespace:
          $ref: "#/components/schemas/namespace"
        protection:
          items:
            $ref: "#/components/schemas/protection"
          type: array
        redirects:
          items:
            $ref: "#/components/schemas/redirect"
          type: array
        templates:
          items:
            $ref: "#/components/schemas/template"
          type: array
        url:
          type: string
        version:
          $ref: "#/components/schemas/version"
        visibility:
          $ref: "#/components/schemas/visibility"
      type: object

    structured-content:
      properties:
        name:
          type: string
        identifier:
          type: integer
        abstract:
          type: string
        description:
          type: string
        url:
          type: string
        date_created:
          type: string
        date_modified:
          type: string
        infobox:
          type: array
          items:
            $ref: "#/components/schemas/part"
        article_sections:
          type: array
          items:
            $ref: "#/components/schemas/part"
        main_entity:
          $ref: "#/components/schemas/entity"
        additional_entities:
          type: array
          items:
            $ref: "#/components/schemas/entity"
        image:
          $ref: "#/components/schemas/image"
        version:
          $ref: "#/components/schemas/version"
        is_part_of:
          $ref: "#/components/schemas/project"
        in_language:
          $ref: "#/components/schemas/language"
      type: object
    part:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        value:
          type: string
        values:
          type: array
          items:
            type: string
        has_parts:
          type: array
          items:
            type: object
        images:
          type: array
          items:
            $ref: "#/components/schemas/image"
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
    image:
      type: object
      properties:
        content_url:
          type: string
        width:
          type: string
        height:
          type: string
        caption:
          type: string
        alternative_text:
          type: string

    link:
      type: object
      properties:
        url:
          type: string
        text:
          type: string
        images:
          type: array
          items:
            $ref: "#/components/schemas/image"

    visibility:
      properties:
        comment:
          type: boolean
        text:
          type: boolean
        user:
          type: boolean
      type: object

    version:
      properties:
        comment:
          type: string
        editor:
          $ref: "#/components/schemas/editor"
        identifier:
          type: integer
        is_flagged_stable:
          type: boolean
        is_minor_edit:
          type: boolean
        noindex:
          type: boolean
        scores:
          $ref: "#/components/schemas/scores"
        maintenance_tags:
          $ref: "#/components/schemas/maintenance_tags"
        tags:
          items:
            type: string
          type: array
      type: object

    editor:
      properties:
        date_started:
          type: string
        edit_count:
          type: integer
        groups:
          items:
            type: string
          type: array
        identifier:
          type: integer
        is_anonymous:
          type: boolean
        is_bot:
          type: boolean
        name:
          type: string
      type: object

    maintenance_tags:
      properties:
        citation_needed_count:
          type: integer
        pov_count:
          type: integer
        clarification_needed_count:
          type: integer
        update_count:
          type: integer
      type: object
      
    scores:
      properties:
        revertrisk:
          $ref: "#/components/schemas/revertrisk"
      type: object

    revertrisk:
      properties:
        prediction:
          type: boolean
        probability:
          properties:
            "false":
              type: number
            "true":
              type: number
          type: object
      type: object

    event:
      properties:
        identifier:
          type: string
        type:
          type: string
        date_created:
          type: string
      type: object

    article_body:
      properties:
        html:
          type: string
        wikitext:
          type: string
      type: object

    category:
      properties:
        name:
          type: string
        url:
          type: string
      type: object

    license:
      properties:
        identifier:
          type: string
        name:
          type: string
        url:
          type: string
      type: object

    protection:
      properties:
        expiry:
          type: string
        level:
          type: string
        type:
          type: string
      type: object

    redirect:
      properties:
        name:
          type: string
        url:
          type: string
      type: object

    template:
      properties:
        name:
          type: string
        url:
          type: string
      type: object

    filter:
      type: object
      properties:
        field:
          type: string
        value:
          type: string

    size:
      type: object
      properties:
        unit_text:
          type: string
        value:
          type: number
