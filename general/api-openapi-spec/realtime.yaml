openapi: 3.0.3
info:
  title: Wikimedia Enterprise Realtime API spec
  description: |
    Provides realtime streams of data in NDJSON and Server Side Events.

    While we provide this swagger spec for quick reference, our official documentation is located on our website:

    - [Official Documentation](https://enterprise.wikimedia.com/docs/)
    - [Data Dictionary & Schema](https://enterprise.wikimedia.com/docs/data-dictionary/)
  version: 2.0.0
servers:
  - url: https://realtime.enterprise.wikimedia.com/
tags:
  - name: articles
    description: Realtime API
    externalDocs:
      description: enterprise docs — realtime api
      url: https://enterprise.wikimedia.com/docs/realtime/
security:
  - bearerAuth: []
paths:
  /v2/articles:
    summary: &articles_summary Article Updates (Streaming)
    description: &articles_description Returns a stream of new articles, updates, name changes, deletes, and visibility changes across all supported projects

    get:
      summary: *articles_summary
      description: *articles_description
      tags:
        - articles
      parameters:
        - description: &since_param_description Since Date in RFC3339 ('2006-01-02T15:04:05Z07:00')
          in: query
          name: since
          schema:
            type: string
        - description: &fields_param_description Specify return fields that you need (example `version.*` will return all version object fields)
          in: query
          name: fields
          schema:
            type: array
        - description: &filters_param_description You can specify how you want to filter your data.
          in: query
          name: filters
          example: [{"field":"in_language.identifier","value":"en"}]
          schema:
            type: array
            items:
              $ref: "#/components/schemas/filter"
        - description: &parts_param_description
            This parameter is used when opening parallel connections to the realtime API.
            Using parts, one can target subsets of partitions in each of the parallel connections.
            The max allowed number of parallel connections is 10, i.e., the parts can take 0 through 9.
            Each of these parts represent 1/10th of the subsequent partition. For instance, parts 0
            correspond to partitions 0 through 4; parts 1 correspond to partitions 5 through 9 and so on.
          in: query
          name: parts
          example: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
          schema:
            type: array
        - description: &offsets_param_description
            This parameter is used when reconnecting to the realtime API. One can pass a map of partition:offset when reconnecting.
            This indicates the realtime API the offset from which to start sending out the events from, for a specific partition.
            If an irrelevant partition (that is not represented by the `parts` param) is included in the `offsets` map, it will simply be ignored.
            If `offsets` param does not include a partition that is represented by `parts`, the events will be delivered in 'live mode' (as they appear) for that partition.
          in: query
          name: offsets
          example: {“0”: 3614782, “4”: 3593806, “8”: 3588693}
          schema:
            type: object
            additionalProperties:
              type: integer
        - description: &since_per_partition_param_description
            This parameter is used when reconnecting to the realtime API. One can pass a map of partition:timestamp (date in RFC3339) when reconnecting.
            This indicates the realtime API the timestamp from which to start sending out the events from, for a specific partition.
            If an irrelevant partition (that is not represented by the `parts` param) is included in the `since_per_partition` map, it will simply be ignored.
            If `since_per_partition` param does not include a partition that is represented by `parts`, the events will be delivered in 'live mode' (as they appear) for that partition.
          in: query
          name: since_per_partition
          example: {“1”: "2023-06-05T12:00:00Z", “2”: "2023-06-05T12:00:00Z"}
          schema:
            type: object
            additionalProperties:
              type: string
      responses: &articles_responses
        200:
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/article"
            application/x-ndjson:
              schema:
                $ref: "#/components/schemas/article"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"message":"string","status": 401}
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"message":"string","status": 404}
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"message":"string","status": 403}
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"message":"string","status":422}
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
            application/x-ndjson:
              schema:
                type: string
                format: ndjson
                example: >
                  {"message":"string","status":500}
    post:
      summary: *articles_summary
      description: *articles_description
      tags:
        - articles
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                since:
                  type: string
                  example: "2006-01-02T15:04:05Z"
                  description: *since_param_description
                fields:
                  type: array
                  example: ["name", "identifier"]
                  items:
                    type: string
                  description: *fields_param_description
                filters:
                  type: array
                  items:
                    $ref: "#/components/schemas/filter"
                  description: *filters_param_description
                  example: >
                    [{"field":"in_language.identifier","value":"en"}]
                parts:
                  type: array
                  example: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
                  items:
                    type: integer
                  description: *parts_param_description
                offsets:
                  type: object
                  additionalProperties:
                    type: integer
                  example: {“0”: 3614782, “4”: 3593806, “8”: 3588693}
                  description: *offsets_param_description
                since_per_partition:
                  type: object
                  additionalProperties:
                    type: string
                  example: {“1”: "2023-06-05T12:00:00Z", “2”: "2023-06-05T12:00:00Z"}
                  description: *since_per_partition_param_description
      responses: *articles_responses

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    error:
      properties:
        message:
          type: string
        status:
          type: integer
      type: object

    revertrisk:
      properties:
        prediction:
          type: boolean
        probability:
          properties:
            "false":
              type: number
            "true":
              type: number
          type: object
      type: object

    article_body:
      properties:
        html:
          type: string
        wikitext:
          type: string
      type: object

    editor:
      properties:
        date_started:
          type: string
        edit_count:
          type: integer
        groups:
          items:
            type: string
          type: array
        identifier:
          type: integer
        is_anonymous:
          type: boolean
        is_bot:
          type: boolean
        name:
          type: string
      type: object

    entity:
      properties:
        aspects:
          items:
            type: string
          type: array
        identifier:
          type: string
        url:
          type: string
      type: object

    language:
      properties:
        identifier:
          type: string
        name:
          type: string
      type: object

    license:
      properties:
        identifier:
          type: string
        name:
          type: string
        url:
          type: string
      type: object

    namespace:
      properties:
        identifier:
          type: integer
        name:
          type: string
      type: object
    
    maintenance_tags:
      properties:
        citation_needed_count:
          type: integer
        pov_count:
          type: integer
        clarification_needed_count:
          type: integer
        update_count:
          type: integer
      type: object

    article:
      properties:
        event:
          $ref: "#/components/schemas/event"
        additional_entities:
          items:
            $ref: "#/components/schemas/entity"
          type: array
        article_body:
          $ref: "#/components/schemas/article_body"
        categories:
          items:
            $ref: "#/components/schemas/category"
          type: array
        date_modified:
          type: string
        identifier:
          type: integer
        in_language:
          $ref: "#/components/schemas/language"
        is_part_of:
          $ref: "#/components/schemas/project"
        license:
          items:
            $ref: "#/components/schemas/license"
          type: array
        main_entity:
          $ref: "#/components/schemas/entity"
        name:
          type: string
        abstract:
          type: string
        namespace:
          $ref: "#/components/schemas/namespace"
        protection:
          items:
            $ref: "#/components/schemas/protection"
          type: array
        redirects:
          items:
            $ref: "#/components/schemas/redirect"
          type: array
        templates:
          items:
            $ref: "#/components/schemas/template"
          type: array
        url:
          type: string
        version:
          $ref: "#/components/schemas/version"
        visibility:
          $ref: "#/components/schemas/visibility"
      type: object

    project:
      properties:
        date_modified:
          type: string
        identifier:
          type: string
        in_language:
          $ref: "#/components/schemas/language"
        name:
          type: string
        size:
          $ref: "#/components/schemas/size"
        url:
          type: string
        version:
          type: string
      type: object

    protection:
      properties:
        expiry:
          type: string
        level:
          type: string
        type:
          type: string
      type: object

    scores:
      properties:
        revertrisk:
          $ref: "#/components/schemas/revertrisk"
      type: object

    size:
      properties:
        unit_text:
          type: string
        value:
          type: number
      type: object

    version:
      properties:
        comment:
          type: string
        editor:
          $ref: "#/components/schemas/editor"
        identifier:
          type: integer
        is_flagged_stable:
          type: boolean
        is_minor_edit:
          type: boolean
        is_breaking_news:
          type: boolean
        noindex:
          type: boolean
        scores:
          $ref: "#/components/schemas/scores"
        maintenance_tags:
          $ref: "#/components/schemas/maintenance_tags"
        tags:
          items:
            type: string
          type: array
      type: object

    visibility:
      properties:
        comment:
          type: boolean
        text:
          type: boolean
        user:
          type: boolean
      type: object

    redirect:
      properties:
        name:
          type: string
        url:
          type: string
      type: object

    template:
      properties:
        name:
          type: string
        url:
          type: string
      type: object

    category:
      properties:
        name:
          type: string
        url:
          type: string
      type: object

    event:
      properties:
        identifier:
          type: string
        type:
          type: string
        date_created:
          type: string
        date_published:
          type: string
        partition:
          type: integer
        offset:
          type: integer
      type: object

    filter:
      properties:
        field:
          type: string
        value:
          type: string
